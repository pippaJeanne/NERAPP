---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Named Entity TEI tagger</title>
		<style>
        body{
            margin: 2rem;
            padding: 5rem;
            background-color: rgba(6, 6, 243, 0.6);
        }
       label{
        font-size: medium;
        margin-right:.5rem;
       }
       p {color:rgb(244, 244, 250);}
       button{
        font-size: 1rem;
        margin: 2rem;
        padding: .5rem;
        background-color: rgba(6, 6, 243, 0.6);
        border-style: initial;
        box-shadow: 1px 2px rgba(6, 6, 243, 0.6);
        border-radius: 10%;
        color: white;
       }       

       h1{
        text-align: center;
        color:rgb(244, 244, 250);
       }
       div.container{
         background-color: rgb(244, 244, 250);
        margin-top: 10%;
        margin-left: auto;
            margin-right: auto;
            padding: 3rem;
        width: 80%;
        height: auto;
        border: 1px solid rgb(244, 244, 250);
        box-shadow: 1px 2px 1px rgb(244, 244, 250);
       }
       div.container div{
        display:flex;
         flex-wrap: wrap;
       
       }
       .output{
         width:50%;
       }

       .output a{
        margin-left:20%;
        text-decoration: none;
        font-size: 1rem;
        padding: .5rem;
        background-color: rgba(6, 6, 243, 0.6);
        border-style: initial;
        box-shadow: 1px 2px rgba(6, 6, 243, 0.6);
        border-radius: 10%;
        color: white;
       }
    </style>
 
	</head>
	<body>
		<h1>Named Entity TEI tagger</h1>
    <p>This is a simple web app for named entity recognition (NER) and tagging for TEI. It uses the <a href="https://github.com/spencermountain/compromise">Compromise.js</a> library for NLP (Natural Language Processing) in JavaScript. It provides recognition for basic entities such as Persons, Places and Organizations. Compromise.js is trained on a set of modern languages, so the app is able to recognize entities in several languages.</p>

<p>This NER app is very simple to use. Just upload your XML document and click on the process button and find your output file in your downloads set folder.</p>

<p><strong><em>Note: </em></strong> <em>The app does a simple pre-tagging, merely to identify as many entities as the models allow in order to facilitate the NER encoding process (only the tag is included without attributes, ex: &lt;persName&gt;William&lt;/persName&gt;, and there may be tagging mistakes if the entity is not accurately recognized). Therefore, a cleaning process is necessary afterwards.</em></p>
    <div class="container">
        <div>
          <label for="file">Upload your XML-TEI file</label>
          <input id="file" name="file" type="file" accept="text/xml"/>
        </div>
        <div>
          <button>Process file</button>
        </div>
    </div> 
 <!--<script is:inline src="https://unpkg.com/compromise@14.10.0"></script>
	<script type="text/javascript">


var txtdata = "";
const btn = document.querySelector('button');
btn.addEventListener('click', handleSubmit);

function handleSubmit() {
     console.log(this)
 const file = document.querySelector('input');
 console.log(file)
 readfile(file); 
 
} 

function readfile(file){
    
    const read = new FileReader();
    console.log(read)
    read.onload = function result(ev){
      var txtdata = "";
        //console.log(ev);
        //let output = document.createElement('div');
        //output.setAttribute('class', "output");
        
        //output.appendChild(a);
        //document.querySelector('.container div').appendChild(output);
        const text = ev.target.result; 
        const parser = new DOMParser();
        const xml = parser.parseFromString(text, "text/xml");
        const select = xml.querySelectorAll('div2:not(div2[type="forematter"]) *');
        const select1 = xml.querySelectorAll('div2 *');
        const select2 = xml.querySelectorAll('body *');
        
        for (var n of select2){
            var txtcont = n.textContent.toString()
            
            txtdata += txtcont + " "; 
        }
      
var doc = nlp(txtdata);
const people =[];
const places = [];
const orgs =[];
const ents = {};
for (var person in doc.people().json()){
  if (people.indexOf(doc.people().json()[person].text)==-1){
  people.push(doc.people().json()[person].text)
}}
for (var place in doc.places().json()){
  if (places.indexOf(doc.places().json()[place].text)==-1){
  places.push(doc.places().json()[place].text)
    }}
for (var org in doc.organizations().json()){
  if (orgs.indexOf(doc.organizations().json()[org].text)==-1){
  orgs.push(doc.organizations().json()[org].text)
}}
//ents.person = people;
//ents.place = places;
//ents.org = orgs;
var txt = text;
for(var pers in people){
 txt = txt.replaceAll(people[pers], `<persName>${people[pers]}</persName/>`)};
for(var pl in places){txt = txt.replaceAll(places[pl], `<placeName>${places[pl]}</placeName/>`)};
for(var org in orgs){txt = txt.replaceAll(orgs[org], `<orgName>${orgs[org]}</orgName/>`)};


// based on: https://www.tutorialspoint.com/how-to-create-and-save-text-file-in-javascript
      const a = document.createElement('a');
        const outfile = new Blob([txt], { type: 'text/xml' });
        //console.log(outfile);
        a.href = URL.createObjectURL(outfile);
        a.download = `ner_${file.files[0].name}`;
        a.click();
        URL.revokeObjectURL(a.href);
        
  
    };
    read.readAsText(file.files[0]) 
} 
 
 </script> -->
 <script src="./form.cjs"></script>

	</body>
</html>
